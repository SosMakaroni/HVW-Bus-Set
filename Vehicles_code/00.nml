grf {
	grfid: "HS\17\02";
	name: string(STR_GRF_NAME);
	desc: string(STR_GRF_DESC);
	version: 10;
	min_compatible_version: 5722;
	param 0 {
        param_cost_factor {
            type: int;
            name: string(STR_PARAM_BUY_NAME);
            desc: string(STR_PARAM_BUY_DESC);
            min_value: 0;
            max_value: 4;
            def_value: 2;
            names: {
					0: string(STR_PARAM_GAME_VERY_EASY);
                    1: string(STR_PARAM_GAME_EASY);
					2: string(STR_PARAM_GAME_NORMAL);
					3: string(STR_PARAM_GAME_HARD);
					4: string(STR_PARAM_GAME_VERY_HARD);
                    };
				}
			}
	param 1 {
		param_running_cost_factor {
            type: int;
            name: string(STR_PARAM_MAINTENANCE_NAME);
            desc: string(STR_PARAM_MAINTENANCE_DESC);
            min_value: 0;
            max_value: 4;
            def_value: 2;
            names: {
					0: string(STR_PARAM_GAME_VERY_EASY);
                    1: string(STR_PARAM_GAME_EASY);
					2: string(STR_PARAM_GAME_NORMAL);
					3: string(STR_PARAM_GAME_HARD);
					4: string(STR_PARAM_GAME_VERY_HARD);
                    };
				}
			}
	param 2 {
		param_cargo_capacity {
            type: int;
            name: string(STR_PARAM_CARGOC_NAME);
            desc: string(STR_PARAM_CARGOC_DESC);
            min_value: 0;
            max_value: 3;
            def_value: 0;
            names: {
					0: string(STR_PARAM_CARGOC_1);
                    1: string(STR_PARAM_CARGOC_2);
					2: string(STR_PARAM_CARGOC_4);
					3: string(STR_PARAM_CARGOC_8);
                    };
				}
			}
	param 3 {
		param_ptemplate {
            type: int;
            name: string(STR_PARAM_PTEMPLATE_NAME);
            desc: string(STR_PARAM_PTEMPLATE_DESC);
            min_value: 0;
            max_value: 1;
            def_value: 0;
            names: {
					0: string(STR_PARAM_PTEMPLATE_1);
                    1: string(STR_PARAM_PTEMPLATE_2);
                    };
				}
			}
}

/*paracapa = (param_cargo_capacity == 1) ? 2 : (param_cargo_capacity == 2) ? 4 : (param_cargo_capacity == 3) ? 8 : 1;*/
parapuco = (param_cost_factor == 1) ? 2 : (param_cost_factor == 2) ? 4 : (param_cost_factor == 3) ? 8 : (param_cost_factor == 4) ? 16 : 1;
pararuco = (param_running_cost_factor == 1) ? 2 : (param_running_cost_factor == 2) ? 4 : (param_running_cost_factor == 3) ? 8 : (param_running_cost_factor == 4) ? 16 : 1;

badgetable {
	"flag",
    "flag/GB",
    "flag/US",
    "flag/HU",
	"flag/CH",
	"flag/europe",
	"flag/flag_1CC",
	"flag/flag_2CC",
	"power",
    "power/steam",
    "power/diesel",
    "power/electric",
    "power/turbine",
    "power/naturgas",
	"power/battery",
	"livery",
	"livery/1cc",
	"livery/2cc",
	"livery/random/1cc",
	"livery/random/2cc",
	"usage",
	"usage/city",
	"usage/suburb",
	"usage/regional",
	"usage/intercity",
	"usage/tourist"
}

tramtypetable  {
	RAIL,	//SIMA
	NBAN: [RAIL],	//Ufibi's Improved
	NIAN: [RAIL],	//Ufibi's ISR
	ELRL,	//FELSOVEZETEK
	NBAE: [ELRL],	//Ufibi's Improved (EL)
	NUAE: [ELRL],	//Ufibi's Urban (EL)
	NUBE: [ELRL],	//Ufibi's Modern Urban (EL)
	NUCE: [ELRL],	//Ufibi's Green (EL)
	NIAN: [ELRL]	//Ufibi's ISR (EL)
}

cargotable {
PASS, COAL, MAIL, OIL_, LVST, GOOD, GRAI, WOOD, IORE, STEL, VALU, PAPR, WHEA, FOOD, GOLD,RUBR, FRUT, MAIZ, CORE, WATR, DIAM, SUGR, AORE, BDMT, BEAN, BEER, BOOM, BRCK, CBLK,CERA, CERE, CLAY, CMNT, COPR, CSTI, CTAR, DYES, ENSP, FECR, FERT, FICR, FISH, FMSP, GLAS, GRVL, JAVA, KAOL, LIME, MILK, OLSD, PEAT, PETR, PHOS, PLAS, PORE, POTA, TOUR, TYRE, URAN, VEHI, WDPR, WOOL, ZINC, ACID, ALUM, BAKE, CASS, CHLO, CHSE, CIGR, COAT, COBL, COKE, ELTR, EOIL, FRVG, FUEL, FURN, IRON, LYE_, MEAT, METL, MNO2, MNSP, MOLS, MPTS, NH3_, NUTS, NICK, NITR, NKOR, NUKF, NUKW, OILI, OILD, OTI1, OTI2, OYST, O2__, PCL_, PIPE, POWR, QLME, RCYC, SALT, SASH, SEED, SESP, SGBT, SGCN, SLAG, SOAP, STAL, STCB, STSE, STSH, STST, STWR, TATO, TEXT, TBCO, TWOD, VBOD, VENG, VPTS, WSTE
/*
//PASSENGERS CLASS
PASS, TOUR, 
//MAIL CLASS
MAIL,
//EXPRESS CLASS
GOOD,
//ARMOURED CLASS
VALU, GOLD, DIAM, 
//BULK CLASS
COAL, GRAI,  IORE, WHEA, MAIZ, CORE, SUGR, AORE, BEAN, GRVL, LIME, SAND, SCMT, 
//PIECE GOODS CLASS
LVST, WOOD, STEL, PAPR,  COPR, METL, 
//LIQUID CLASS
OIL_, RUBR, WATR, PETR, RFPR, 
//EXPRESS + REFRIGERATED CLASS
FOOD, FISH, MEAT, 
//BULK + REFRIGERATED CLASS
FRUT, 
//BULK + COVERED CLASS
CLAY, CMNT, OLSD, 
//BULK + PIECE CLASS
FERT, FICR, WDPR, RCYC, 
//HAZARDOUS CLASS

//PIECE GOODS + COVERED CLASS
BDMT, WOOL, TEXT, 
//OVERSIZED CLASS

//PIECE + OVERSIZED CLASS
GLAS, VEHI, 
//POWDERIZED CLASS (COVER)

//EXPRESS + LIQUID + REFRIGERATED
MILK, 
//EXPRESS + PIECE + LOQUID CLASS
BEER, 
//EXPRESS + PIECE CLASS
BOOM, ENSP, FMSP, JAVA, VPTS, VENG, VBOD,*/
}

template tmpl_purchase_k() { // Kicsi
	[193,	0,	72,	20,	-25,	-13]}

template tmpl_purchase_n() { // Nagyméretű
	[0,		0,	99,	25,	-25,	-15]}
	
/*template tmpl_depo() {
	[98,	0,	90,	25,	-13,-15]}*/
/*template tmpl_1(z1){
	[0		*z1,	0,	11	*z1,	49	*z1,	-5	*z1,	-13	*z1,	ANIM]	//
	[19		*z1,	0,	54	*z1,	40	*z1,	-45	*z1,	-12	*z1,	ANIM]	//-14 -6
	[81		*z1,	0,	69	*z1,	15	*z1,	-54	*z1,	-10	*z1,	ANIM]	//
	[158	*z1,	0,	54	*z1,	40	*z1,	-41	*z1,	-29	*z1,	ANIM]	//-10 -9
	[220	*z1,	0,	11	*z1,	49	*z1,	-6	*z1,	-32	*z1,	ANIM]	//
	[239	*z1,	0,	54	*z1,	40	*z1,	-15	*z1,	-28	*z1,	ANIM]	//-12 -8
	[301	*z1,	0,	69	*z1,	15	*z1,	-11	*z1,	-9	*z1,	ANIM]	//
	[378	*z1,	0,	54	*z1,	40	*z1,	-8	*z1,	-14	*z1,	ANIM]	//-6 -8
	}*/

template tmpl_toldat() {
	[0,	0,	2,	2,	1,	1]
	}

spriteset(ss_toldat, "src/icons.png")		{tmpl_toldat()}

template tmpl_semmi() {
	[0,	0,	2,	2,	1,	1]
	[0,	0,	2,	2,	1,	1]
	[0,	0,	2,	2,	1,	1]
	[0,	0,	2,	2,	1,	1]
	[0,	0,	2,	2,	1,	1]
	[0,	0,	2,	2,	1,	1]
	[0,	0,	2,	2,	1,	1]
	[0,	0,	2,	2,	1,	1]
	}


template tmpl_depo() {
	[193,	0,	72,	20,	-19,-12]}

template tmpl_1(){
	[107,	0,	11,	49,	-5,	-15,	ANIM]
	[126,	0,	59,	44,	-49,	-16,	ANIM]
	[193,	0,	72,	20,	-54,	-13,	ANIM]
	[273,	0,	59,	44,	-44,	-33,	ANIM]
	[340,	0,	11,	49,	-6,	-37,	ANIM]
	[359,	0,	59,	44,	-14,	-33,	ANIM]
	[426,	0,	72,	20,	-11,	-13,	ANIM]
	[506,	0,	59,	44,	-8,	-14,	ANIM]
	}
template tmpl_2(){
	[573,	0,	22,	98,	-10,	-30,	ANIM]
	[603,	0,	118,	88,	-98,	-32,	ANIM]
	[729,	0,	144,	40,	-108,	-26,	ANIM]
	[881,	0,	118,	88,	-88,	-66,	ANIM]
	[1007,	0,	22,	98,	-12,	-74,	ANIM]
	[1037,	0,	118,	88,	-28,	-66,	ANIM]
	[1163,	0,	144,	40,	-22,	-26,	ANIM]
	[1315,	0,	118,	88,	-16,	-28,	ANIM]
	}
template tmpl_4(){
	[1441,	0,	44,	196,	-20,	-60,	ANIM]
	[1493,	0,	236,	175,	-196,	-64,	ANIM]
	[1737,	0,	288,	79,	-216,	-52,	ANIM]
	[2033,	0,	236,	175,	-176,	-132,	ANIM]
	[2277,	0,	44,	196,	-24,	-148,	ANIM]
	[2329,	0,	236,	175,	-56,	-132,	ANIM]
	[2573,	0,	288,	79,	-44,	-52,	ANIM]
	[2869,	0,	236,	175,	-32,	-56,	ANIM]
	}

// ----------------------badges:
template tmpl_badge_big(x, y) {
	[x,	y,	13,	10,	0,	0]}
template tmpl_badge_small(x, y) {
	[x,	y,	10,	10,	0,	0]}
// ---power
item (FEAT_BADGES, power) {
    property {
        label: "power";
        name: string(STR_POWER);
    }
}


spriteset(ss_power_naturgas, "src/icons.png")		{tmpl_badge_small(20, 100)}

item (FEAT_BADGES, power_naturgas) {
    property {
        label: "power/naturgas";
        name: string(STR_NATURGAS);
    }
	graphics {
		default: ss_power_naturgas;
	}
}

// ---livery
spriteset(ss_livery_1cc, "src/icons.png")		{tmpl_badge_big(20, 80)}
spriteset(ss_livery_2cc, "src/icons.png")		{tmpl_badge_big(40, 80)}

item (FEAT_BADGES, livery) {
    property {
        label: "livery";
        name: string(STR_LIVERY);
    }
}

item (FEAT_BADGES, livery_1cc) {
    property {
        label: "livery/1cc";
        name: string(STR_1CC);
		flags: bitmask(3);
    }
	graphics {
		default: ss_livery_1cc;
	}
}
item (FEAT_BADGES, livery_2cc) {
    property {
        label: "livery/2cc";
        name: string(STR_2CC);
		flags: bitmask(3);
    }
	graphics {
		default: ss_livery_2cc;
	}
}
// ---Usage
spriteset(ss_usage_city, "src/icons.png")		{tmpl_badge_big(20, 120)}
spriteset(ss_usage_suburb, "src/icons.png")		{tmpl_badge_big(40, 120)}
spriteset(ss_usage_regional, "src/icons.png")		{tmpl_badge_big(60, 120)}
spriteset(ss_usage_intercity, "src/icons.png")		{tmpl_badge_big(80, 120)}
spriteset(ss_usage_tourist, "src/icons.png")		{tmpl_badge_big(100, 120)}

item (FEAT_BADGES, usage) {
    property {
        label: "usage";
        name: string(STR_USAGE);
    }
}
item (FEAT_BADGES, city) {
    property {
        label: "usage/city";
        name: string(STR_USAGE_CITY);
    }
	graphics {
		default: ss_usage_city;
	}
}
item (FEAT_BADGES, suburb) {
    property {
        label: "usage/suburb";
        name: string(STR_USAGE_SUBURB);
    }
	graphics {
		default: ss_usage_suburb;
	}
}
item (FEAT_BADGES, regional) {
    property {
        label: "usage/regional";
        name: string(STR_USAGE_REGIONAL);
    }
	graphics {
		default: ss_usage_regional;
	}
}
item (FEAT_BADGES, intercity) {
    property {
        label: "usage/intercity";
        name: string(STR_USAGE_INTERCITY);
    }
	graphics {
		default: ss_usage_intercity;
	}
}
item (FEAT_BADGES, tourist) {
    property {
        label: "usage/tourist";
        name: string(STR_USAGE_TOURIST);
    }
	graphics {
		default: ss_usage_tourist;
	}
}
